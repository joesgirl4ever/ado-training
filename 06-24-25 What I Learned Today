## Date: {{6-24-25}}

### What I Learned Today
## ZETTELKASTEN technique - Learn faster, learn more! (Mischa vd Berg)
-Creating your second brain (aka: your own private KB)
-write your notes in your own words
-Create separate sections for: 
-Concepts & Definitions
-Code Snippets
-Problem-solving patterns
-Project Documentation
-Learning Resources
-Obsidian is ideal (I have it, setting up infra)
## DAILY PRACTICE:
# 15 minute review
-Review yesterday's notes
-Plan today's learning objectives
# Active Learning Sessions (50 minutes)
-Take notes while learning
-Write questions
-Create examples
# Finishing Summary (10 minutes)
-Summarize key learnings
-Connect to existing knowledge (Obsidian)
-Plan tomorrow's focus
=========================
Shampoo, rinse, repeat :) (This falls into my idea of developing myself as the product, as in Agile)
# COMMON PITFALLS TO AVOID:
-Taking notes without processing them
-Projects that are too ambitious
-Not connecting thoery to practice
-Studying without clear objectives
=========================
## TIPS:
-Use a CURIOSITY MINDSET- ask why's about everything you encounter
-Connect new info to real-world applications (PRACTICAL IMPORTANCE!)
-Share my discoveries with others
-Challenge assumptions about "boring" topics
# DEEP FOCUS: You can develop it and make it stronger!
-Dedicated learning space
-Screen at eye level
-Good posture (affects your mind)
-Remove digital distractions
# ENERGY MANAGEMENT:
-ID your peak hours
-Schedule challenging learning during these times
-Take breaks before mental fatigue sets in
-Use physical movement to reset your focus
# POMODORO: (25/5, 25/5, 25/5, 25/5)
-50 min session (longer for Mischa & me- 25 mins too short)
-10 min break
-Do 4x, then 30 min break
-On breaks, do physical movement
-Track # of completed sessions
-Always ask- "Do I have one more Pomodoro in me?"
# DON'T: 
-Check messages on breaks
-Skip breaks
-Switch tasks mid-Pomodoro
-Set unrealistic session goals
# PROJECT-BASED LEARNING: THE ULTIMATE TEACHER
-Reading about something is one thing: building something is entirely different
-Projects force you to:
-Confront real world challenges
-Find and fix actual errors
-Make architectural decisions
-Learn supporting technologies












